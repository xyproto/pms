#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# promptmessages 0.4
#
# Alexander F RÃ¸dseth <xyproto@archlinux.org>
# 2017-10-05
# 2017-10-08
# 2017-10-12
# 2017-10-28
#
# MIT licensed
#

import datetime
import os
import os.path
import sys

dir_path = os.path.dirname(os.path.realpath(__file__))
time_confs = [
    os.path.expanduser("~/.config/pmsg/time.conf"),
    os.path.expanduser("~/.pmsg/time.conf"),
    os.path.expanduser("~/.pmsgrc"),
    "/etc/pmsg/time.conf",
    "/etc/pmsgrc",
]


class Event:

    def __init__(self, start_hour, start_minute, end_hour, end_minute, desc):
        self.start_hour = int(start_hour)
        self.start_minute = int(start_minute)
        self.end_hour = int(end_hour)
        self.end_minute = int(end_minute)
        self.desc = desc.strip()

    def __str__(self):
        return "{}:{} - {}:{} : {}".format(self.start_hour, self.start_minute, self.end_hour, self.end_minute, self.desc)

    def at(self, hour, minute):
        given_minute = hour * 60 + minute
        start_minute = self.start_hour * 60 + self.start_minute
        end_minute = self.end_hour * 60 + self.end_minute
        return given_minute >= start_minute and given_minute <= end_minute


def main():
    # List of events
    events = []

    lines = []
    for time_conf in time_confs:
        try:
            lines = open(time_conf).read().split("\n")[:-1]
        except FileNotFoundError:
            continue
        except PermissionError as e:
            print(e)
            sys.exit(1)
        except UnicodeDecodeError as e:
            print(e)
            sys.exit(1)
    if not lines:
        print("ERROR: Found no configuration for pmsg.")
        sys.exit(1)
    for line in lines:
        if line.strip().startswith("#"):
            continue
        if line.count(":") >= 2 and line.count("-") >= 1:
            elements = line.split("-")
            if len(elements) == 2:
                start_hour, start_minute = elements[0].split(":", 1)
                end_hour, end_minute, desc = elements[1].split(":", 2)
                events.append(Event(start_hour, start_minute, end_hour, end_minute, desc))

    now = datetime.datetime.now()
    for event in events:
        if event.at(now.hour, now.minute):
            print(event.desc)


if __name__ == "__main__":
    main()
